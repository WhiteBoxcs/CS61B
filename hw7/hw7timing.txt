1a. Results for InsertRandomSpeedTest for N = 1000000:

    Inserting 1000000 random length 10 Strings into a StringSet of type BSTStringSet
    Took: 1.35 sec.
    
    Inserting 1000000 random length 10 Strings into a StringSet of type ECHashStringSet
    Took: 0.88 sec.
    
    Inserting 1000000 random length 10 Strings into a StringSet of type java.util.TreeSet
    Took: 1.17 sec.
    
    Inserting 1000000 random length 10 Strings into a StringSet of type java.util.HashSet
    Took: 0.47 sec.



1b. Results for InsertRandomSpeedTest for N = 2000000:

    Inserting 2000000 random length 10 Strings into a StringSet of type BSTStringSet
    Took: 3.77 sec.
    
    Inserting 2000000 random length 10 Strings into a StringSet of type ECHashStringSet
    Took: 2.02 sec.
    
    Inserting 2000000 random length 10 Strings into a StringSet of type java.util.TreeSet
    Took: 2.74 sec.
    
    Inserting 2000000 random length 10 Strings into a StringSet of type java.util.HashSet
    Took: 1.13 sec.



1c. Does your ECHashStringSet look roughly linear or roughly quadratic in its scaling behavior for random strings?
    It appears roughly linear, 2.02 ~= 2*0.88, whereas if it were quadratic, I might see 4*0.88.


2a. Results for InsertInOrderSpeedTest for N = 10000:

    Inserting 10000 in-order strings into a StringSet of type BSTStringSet
    Took: 0.66 sec.
    
    Inserting 10000 in-order strings into a StringSet of type ECHashStringSet
    Took: 0.01 sec.
    
    Inserting 10000 in-order strings Strings into a StringSet of type java.util.TreeSet
    Took: 0.02 sec.
    
    Inserting 10000 in-order strings Strings into a StringSet of type java.util.HashSet
    Took: 0.01 sec.

2b. Results for InsertInOrderSpeedTest for N = 20000:

    Inserting 20000 in-order strings into a StringSet of type BSTStringSet
    Took: 1.91 sec.
    
    Inserting 20000 in-order strings into a StringSet of type ECHashStringSet
    Took: 0.02 sec.
    
    Inserting 20000 in-order strings Strings into a StringSet of type java.util.TreeSet
    Took: 0.04 sec.
    
    Inserting 20000 in-order strings Strings into a StringSet of type java.util.HashSet
    Took: 0.01 sec.


2c. Does your **BST**StringSet look roughly linear or roughly quadratic in its scaling behavior for in order strings? 
    After running the test on 30000, I yield the following result:
        Inserting 30000 in-order strings into a StringSet of type BSTStringSet
        Took: 3.32 sec.
    So it appears that inserting in order strings is actually Theta(n).

Before submitting, make sure that your ECHashStringSet is capable of handling inputs of size 1000000 in a reasonable amount of time (less than a minute).
    
    You should know that, your BSTString implementation can't handle input of that size. <3
